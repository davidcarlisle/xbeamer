% \iffalse meta-comment
%
% File: xbeamer-decode.dtx Copyright (C) 2023-2025 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "xbeamer bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/xbeamer
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% Additional commands needed in this source
\NewDocumentCommand\email{m}{\href{mailto:#1}{\nolinkurl{#1}}}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% ^^A As we are dealing with a class, this has to be done manually
% \def\filedate{2023-02-21}
% \def\fileversion{v0.0.0}
%
% \title{^^A
%   \pkg{xbeamer-decode} -- Decoding overlay specs^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail: \email{joseph@texdev.net}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xbeamer-decode} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*class>
%    \end{macrocode}
%
% Identify the internal prefix.
%    \begin{macrocode}
%<@@=xbeamer>
%    \end{macrocode}
%
% \begin{variable}{\l_@@_decode_result_bool}
%   The result from decoding: are we on the current slide. This may well be
%   better handled by moving to a |TF| signature: to be explored.
%    \begin{macrocode}
\bool_new:N \l_@@_decode_result_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_decode_int}
%   The automatically-incremented value for the relative overlay value.
%    \begin{macrocode}
\int_new:N \g_@@_decode_int
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_decode_step_bool}
%   Tracks whether to step \cs{g_@@_decode_int}.
%    \begin{macrocode}
\bool_new:N \l_@@_decode_step_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\l_@@_decode_arg_str}
%   For error usage.
%    \begin{macrocode}
\str_new:N \l_@@_decode_arg_str
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l_@@_decode_overlays_str, \l_@@_decode_overlays_clist}
%   The decoded overlay specification: will have only absolute slide numbers
%   present, potentially along with ranges.
%    \begin{macrocode}
\str_new:N \l_@@_decode_overlays_str
\clist_new:N \l_@@_decode_overlays_clist
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l_@@_decode_action_str}
%    \begin{macrocode}
\str_new:N \l_@@_decode_action_str
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_decode_parse:n, \@@_decode_parse_aux:n}
% \begin{macro}{\@@_decode_parse:w}
%   First a simple check for an entirely blank argument: if that's the case,
%   there is no additional overlay to consider. Then deal with any category code
%   issues before splitting at a \verb"|", if present. If there is, we have an
%   action specification as |#2|. Otherwise, there might be one as |#1|, so
%   there is a check for that.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_decode_parse:n #1
  {
    \tl_if_blank:nTF {#1}
      { \bool_set_true:N \l_@@_decode_result_bool }
      {
        \bool_set_false:N \l_@@_decode_result_bool
        \str_set:Nn \l_@@_decode_arg_str {#1}
        \str_clear:N \l_@@_decode_overlays_str
        \exp_args:No \@@_decode_parse_aux:n { \l_@@_decode_arg_str }
      }
  }
\cs_new_protected:Npn \@@_decode_parse_aux:n #1
  { \@@_decode_parse:w #1 | | \q_@@_stop }
\cs_new_protected:Npn \@@_decode_parse:w #1 | #2 | #3 \q_@@_stop
  {
    \tl_if_blank:nTF {#2}
      { \@@_decode_mode:n {#1} }
      {
        \@@_decode_overlays:n {#1}
        \@@_decode_action:n {#2}
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{variable}{\c_@@_modes_clist}
%   The possible modes: detokenized as that is applied up-front in decoding.
%    \begin{macrocode}
\clist_const:Ne \c_@@_modes_clist
  {
    \tl_to_str:n { all }       ,
    \tl_to_str:n { handout }   ,
    \tl_to_str:n { projector }
  }
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\@@_decode_mode:n}
%   Check if the mode is known and current.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_decode_mode:n #1
  {
    \clist_if_in:NnTF \c_@@_modes_clist {#1}
      {
        \bool_lazy_any:nTF
          {
            { \str_if_eq_p:nn {#1} { all } }
            { \str_if_eq_p:Vn \l_@@_mode_str {#1} }
            { \str_if_eq_p:Vn \l_@@_mode_str { all } }
          }
          { \bool_set_true:N \l_@@_decode_result_bool }
          { \bool_set_false:N \l_@@_decode_result_bool }
      }
      { \@@_decode_overlays:n {#1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}{\c_@@_actions_clist}
%    \begin{macrocode}
\clist_const:Ne \c_@@_actions_clist
  {
    \tl_to_str:n { alert }     ,
    \tl_to_str:n { invisible } ,
    \tl_to_str:n { uncover }
  }
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\@@_decode_action:n}
% \begin{macro}{\@@_decode_action:w}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_decode_action:n #1
  { \@@_decode_action:w #1 @ @ \q_@@_stop }
\cs_new_protected:Npn \@@_decode_action:w #1 @ #2 @ #3 \q_@@_stop
  {
    \clist_if_in:NnTF \c_@@_actions_clist {#1}
      {
        \str_set:Nn \l_@@_decode_action_str {#1}
        \tl_if_blank:nF {#2}
          { \@@_decode_overlays:n {#1} }
      }
      {
        \msg_error:nnV { xbeamer } { bad-overlay-spec }
          \l_@@_decode_arg_str
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_decode_overlays:n}
% \begin{macro}{\@@_decode_overlays:N}
% \begin{macro}{\@_decode_overlay_+:w, \@@_decode_overlay_.:w}
% \begin{macro}{\@@_decode_overlay_aux:NN}
% \begin{macro}{\@@_decode_overlay_offset:NnN}
% \begin{macro}{\@@_decode_overlay_offset:Nn}
%   The loop here needs to replace all |+| and |.| characters by the current
%   automatic value, allowing for any offsets. This step also needs to track
%   whether to increment the automatic value: true if a |+| is seen, false
%   otherwise.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_decode_overlays:n #1
  {
    \bool_set_false:N \l_@@_decode_step_bool
    \@@_decode_overlays:N #1 \q_recursion_tail \q_recursion_stop
    \bool_if:NT \l_@@_decode_step_bool
      { \int_gincr:N \g_@@_decode_int }
    \@@_decode_check:
  }
\cs_new_protected:Npn \@@_decode_overlays:N #1
  {
    \quark_if_recursion_tail_stop:N #1
    \cs_if_exist_use:cF { @@_decode_overlay_ #1 :w }
      {
        \str_put_right:Nn \l_@@_decode_overlays_str {#1}
        \@@_decode_overlays:N
      }
  }
\cs_new_protected:cpn { @@_decode_overlay_+:w }
  {
    \bool_set_true:N \l_@@_decode_step_bool
    \@@_decode_overlay_aux:NN 0
  }
\cs_new_protected:cpn { @@_decode_overlay_.:w }
  { \@@_decode_overlay_aux:NN 1 }
%    \end{macrocode}
%   The look-ahead for an offset to a relative specification. If the
%   end-of-loop is reached, the value still needs to be inserted: to
%   share auxiliaries, that is done by using the same function as elsewhere,
%   so the end-of-loop markers are re-inserted. Otherwise, there is a check
%   to see if the next token is a |(|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_decode_overlay_aux:NN #1#2
  {
    \quark_if_recursion_tail_stop_do:Nn #2
      {
        \@@_decode_overlay_offset:Nn 0 { 0 }
        \q_recursion_tail \q_recursion_stop
      }
    \token_if_eq_meaning:NNTF #2 ( % )
      { \@@_decode_overlay_offset:NnN #1 { } }
      { \@@_decode_overlay_offset:Nn #1 { 0 } #2 }
  }
%    \end{macrocode}
%   For the end of an offset, any valid overlay specification must have a
%   closing |)|, so this time the end-of-loop case is an error. Otherwise
%   simply collect up tokens until the closing |)| is found.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_decode_overlay_offset:NnN #1#2#3
  {
    \quark_if_recursion_tail_stop_do:Nn #3
      {
        \msg_error:nnV { xbeamer } { bad-overlay-spec }
          \l_@@_decode_arg_str
      } % (
    \token_if_eq_meaning:NNTF #3 )
      { \@@_decode_overlay_offset:Nn #1 {#2} }
      { \@@_decode_overlay_offset:NnN #1 {#2#3} }
  }
%    \end{macrocode}
%   Overlay values can never be negative: this is enforced here.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_decode_overlay_offset:Nn #1#2
  {
    \str_put_right:Ne \l_@@_decode_overlays_str
      { \int_max:nn { 0 } { #2 + \g_@@_decode_int - #1 } }
    \@@_decode_overlays:N
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_decode_check:}
% \begin{macro}{\@@_decode_check:w}
% \begin{macro}{\@@_decode_check_single:n}
% \begin{macro}{\@@_decode_check_range:nn}
%   At this stage we have a fully \enquote{written out} overlay specification,
%   and need to work out if the current slide is included. We need to look at
%   each entry in the comma-separated list to sort this out. First we filter
%   out the case of a |*|, then it's a question of working out whether each
%   entry is a single number or a range, and if the latter, whether it's
%   open at either the start or the end.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_decode_check:
  {
    \clist_set:NV \l_@@_decode_overlays_clist \l_@@_decode_overlays_str
    \clist_if_in:NnTF \l_@@_decode_overlays_clist { * }
      { \bool_set_true:N \l_@@_decode_result_bool }
      {
        \clist_map_inline:Nn \l_@@_decode_overlays_clist
          { \@@_decode_check:w 0 ##1 - - \q_stop }
      }
  }
%    \end{macrocode}
%   If |#3| is empty, both of the \enquote{filler} |-| tokens were consumed: we
%   have a single value. Otherwise there is a range: the setup above ensures
%   that there will be starting value in all cases, but there may not be an
%   end one.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_decode_check:w #1 - #2 - #3 \q_stop
  {
    \tl_if_blank:nTF {#3}
      { \@@_decode_check_single:n {#1} }
      {
        \tl_if_blank:nTF {#2}
          { \@@_decode_check_range:nn {#1} { \c_max_int } }
          { \@@_decode_check_range:nn {#1} {#2} }
      }
  }
\cs_set_protected:Npn \@@_decode_check_single:n #1
  {
    \int_compare:nNnTF \g_@@_slide_int = {#1}
      {
        \bool_set_true:N \l_@@_decode_result_bool
        \clist_map_break:
      }
      {
        \int_compare:nNnT {#1} > \g_@@_slide_int
          { \bool_gset_true:N \g_@@_slide_continue_bool }
      }
  }
%    \end{macrocode}
%   TODO: In the following we might want to add a check whether the range was
%   given with |#1| being smaller than |#2|, to be decided upon.
%    \begin{macrocode}
\cs_set_protected:Npn \@@_decode_check_range:nn #1#2
  {
    \int_compare:nNnF \g_@@_slide_int > {#2}
      {
        \int_compare:nNnTF \g_@@_slide_int < {#1}
          { \bool_gset_true:N \g_@@_slide_continue_bool }
          {
            \bool_set_true:N \l_@@_decode_result_bool
            \bool_lazy_and:nnT
              { \int_compare_p:nNn \g_@@_slide_int < {#2} }
              { \int_compare_p:nNn {#2} < \c_max_int }
              { \bool_gset_true:N \g_@@_slide_continue_bool }
            \clist_map_break:
          }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\msg_new:nnnn { xbeamer } { bad-overlay-spec }
  { Bad~overlay~specification~"#1". }
  {
    The~overlay~specification~given~doesn't~follow~the~pattern~described~in~
    the~xbeamer~manual:~it~has~been~ignored.
  }
%    \end{macrocode}
%
%    \begin{macrocode}
%</class>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
