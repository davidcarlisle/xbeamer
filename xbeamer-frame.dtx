% \iffalse meta-comment
%
% File: xbeamer-frame.dtx Copyright (C) 2023-2025 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "xbeamer bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/xbeamer
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% Additional commands needed in this source
\NewDocumentCommand\email{m}{\href{mailto:#1}{\nolinkurl{#1}}}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% ^^A As we are dealing with a class, this has to be done manually
% \def\filedate{2023-02-21}
% \def\fileversion{v0.0.0}
%
% \title{^^A
%   \pkg{xbeamer-frame} -- The structure of frames^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail: \email{joseph@texdev.net}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xbeamer-frame} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*class>
%    \end{macrocode}
%
% Identify the internal prefix.
%    \begin{macrocode}
%<@@=xbeamer>
%    \end{macrocode}
%
% \subsection{Slides in frames}
%
% \begin{variable}{\g_@@_slide_continue_bool}
%   Tracks whether the frame continues after the current slide.
%    \begin{macrocode}
\bool_new:N \g_@@_slide_continue_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_slide_box}
%    \begin{macrocode}
\box_new:N \l_@@_slide_box
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_slide_int}
%   The slide number inside the current frame: needed to know which overlays
%   are active.
%    \begin{macrocode}
\int_new:N \g_@@_slide_int
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\@@_slide:n}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_slide:n #1
  {
    \group_begin:
      \int_gzero:N \g_@@_slide_int
      \int_gset:Nn \g_@@_decode_int { 1 }
      \bool_gset_false:N \g_@@_slide_continue_bool
      \RenewCommandCopy \frame \@@_latexe_frame:n
      \bool_do_while:Nn \g_@@_slide_continue_bool
        {
          \int_gincr:N \g_@@_slide_int
          \@@_slide_begin:
            #1
          \@@_slide_end:
        }
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_slide_begin:, \@@_slide_end:}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_slide_begin:
  {
    \vbox_set:Nw \l_@@_slide_box
  }
\cs_new_protected:Npn \@@_slide_end:
  {
    \vbox_set_end:
    \vbox_set_to_ht:Nnn \l_@@_slide_box { \textheight }
      {
        \use:c { @@_slide_align_ \l_@@_frame_alignment_tl :n }
          { \vbox_unpack_drop:N \l_@@_slide_box }
      }
    \box_use_drop:N \l_@@_slide_box
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \@@_slide_align_bottom:n  ,
%     \@@_slide_align_center:n  ,
%     \@@_slide_align_stretch:n ,
%     \@@_slide_align_top:n
%   }
%   A pretty standard abstraction: we make sure there are always two skips.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_slide_align_bottom:n #1
  {
    \skip_vertical:n { 0pt~plus~1fil }
    #1
    \skip_vertical:n { 0pt }
  }
\cs_new_protected:Npn \@@_slide_align_center:n #1
  {
    \skip_vertical:n { 0pt~plus~0.5fil }
    #1
    \skip_vertical:n { 0pt~plus~0.5fil }
  }
\cs_new_protected:Npn \@@_slide_align_stretch:n #1
  {
    \skip_vertical:n { 0pt }
    #1
    \skip_vertical:n { 0pt }
  }
\cs_new_protected:Npn \@@_slide_align_top:n #1
  {
    \skip_vertical:n { 0pt }
    #1
    \skip_vertical:n { 0pt~plus~1fil }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Frame options}
%
% \begin{variable}{\l_@@_frame_alignment_tl}
%    \begin{macrocode}
\tl_new:N \l_@@_frame_alignment_tl
%    \end{macrocode}
% \end{variable}
%
%    \begin{macrocode}
\keys_define:nn { xbeamer / frame }
  {
    vertical-alignment .choices:nn =
      { bottom , center , stretch , top }
      {
        \tl_set_eq:NN \l_@@_frame_alignment_tl
          \l_keys_value_tl
      }
  }
\keys_set:nn { xbeamer / frame }
  {
    vertical-alignment = center
  }
%    \end{macrocode}
%
% \subsection{The \texttt{frame} environment}
%
% \begin{macro}{\@@_latexe_frame:n}
%   As we will need to re-define \cs{frame} but have it available inside
%   frames, a copy is made here.
%    \begin{macrocode}
\NewCommandCopy \@@_latexe_frame:n \frame
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_frame_process:n}
%   Here, the frame content is received as the argument.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_frame_process:n #1
  { \@@_slide:n {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{frame}
%    \begin{macrocode}
\RenewDocumentEnvironment { frame } { D <> { all } O { } +b }
  {
    \keys_set:nn { xbeamer / frame } {#2}
    \@@_frame_process:n {#3}
  }
  { }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</class>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
