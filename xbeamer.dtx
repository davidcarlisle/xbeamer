% \iffalse meta-comment
%
% File: xbeamer.dtx Copyright (C) 2023 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "xbeamer bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/xbeamer
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% Additional commands needed in this source
\NewDocumentCommand\email{m}{\href{mailto:#1}{\nolinkurl{#1}}}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% ^^A As we are dealing with a class, this has to be done manually
% \def\filedate{2023-02-21}
% \def\fileversion{v0.0.0}
%
% \title{^^A
%   \pkg{xbeamer} -- Overall set up^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail: \email{joseph.wright@morningstar2.co.uk}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xbeamer} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*class>
%    \end{macrocode}
%
% Identify the internal prefix.
%    \begin{macrocode}
%<@@=xbeamer>
%    \end{macrocode}
%
% \subsection{Set up}
%
% Identify the package and give the over all version information.
%    \begin{macrocode}
\ProvidesExplClass {xbeamer} {2023-02-21} {0.0.0}
  {A class for typesetting presentations}
%    \end{macrocode}
%
% \subsection{Extra variants}
%
%    \begin{macrocode}
\cs_generate_variant:Nn \hook_gput_code:nnn { nnx }
%    \end{macrocode}
%
% \subsection{Scratch space}
%
% \begin{macro}{\@@_tmp:w}
%   For one-off processing.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_tmp:w { }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Option handling}
%
% \begin{variable}{\l_@@_aspect_ratio_str, \l_@@_fontsize_dim}
%    \begin{macrocode}
\keys_define:nn { xbeamer }
  {
    aspect-ratio .str_set:N =
      \l_@@_aspect_ratio_str ,
    font-size .dim_set:N =
      \l_@@_fontsize_dim ,
    unknown .code:n =
      {
        \msg_error:nnx { xbeamer } { unknown-class-option }
          { \l_keys_key_str \tl_if_empty:nF {#1} { = \tl_to_str:n {#1} } }
      }
  }
%    \end{macrocode}
% \end{variable}
%
% Scope for options.
%    \begin{macrocode}
\keys_define:nn { xbeamer }
  {
    aspect-ratio .usage:n = load ,
    font-size    .usage:n = load
  }
%    \end{macrocode}
%
% Initial values
%    \begin{macrocode}
\keys_set:nn { xbeamer }
  {
    aspect-ratio = 16:9 ,
    font-size    = 11pt
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\msg_new:nnnn { xbeamer } { unknown-class-option }
  { Unknown~class~option~"#1". }
  {
    The~xbeamer~class~received~the~key-value~option~"#1",~
    but~this~is~not~recognised.
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\ProcessKeyOptions
%    \end{macrocode}
%
% \subsection{Setting up}
%
%  Load the font size setup if available, otherwise fall back on scaling.
%    \begin{macrocode}
\file_if_exist_input:nF { size \dim_to_decimal:n \l_@@_fontsize_dim .clo }
  {
    \file_input:n { size10.clo }
    \RequirePackage { relsize }
    \hook_gput_code:nnx { begindocument } { xbeamer }
      { \exp_not:N \relsize { \fp_eval:n { \l_@@_fontsize_dim / 10pt } } }
  }
%    \end{macrocode}
%
% \begin{variable}{\c_@@_paper_height_dim, \c_@@_paper_width_dim}
%   As \pkg{geometry} is being used to set the paper size with no previous
%   value, we have to use the optional argument rather than waiting to
%   apply \cs{geometry}.
%    \begin{macrocode}
\dim_const:Nn \c_@@_paper_height_dim { 100mm }
\use:x
  {
    \cs_set_protected:Npn \exp_not:N \@@_tmp:w
      ##1 \tl_to_str:n { : } ##2 \tl_to_str:n { : } ##3 \exp_not:N \q_stop
      {
        \dim_const:Nn \exp_not:N \c_@@_paper_width_dim
          {
            \exp_not:N \fp_to_dim:n
              { (##1 / ##2) * \exp_not:N \c_@@_paper_height_dim }
          }
      }
    \@@_tmp:w \l_@@_aspect_ratio_str
      \tl_to_str:n { : } 100 \exp_not:N \q_stop
  }
\use:x
  {
    \exp_not:N \RequirePackage
      [
        papersize =
          {
            \dim_use:N \c_@@_paper_width_dim  ,
            \dim_use:N \c_@@_paper_height_dim
          }
      ]
      { geometry }
  }
%    \end{macrocode}
% \end{variable}
%
%    \begin{macrocode}
%</class>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
