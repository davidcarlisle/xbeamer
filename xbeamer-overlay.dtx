% \iffalse meta-comment
%
% File: xbeamer-overlay.dtx Copyright (C) 2024,2025 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "xbeamer bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/xbeamer
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% Additional commands needed in this source
\NewDocumentCommand\email{m}{\href{mailto:#1}{\nolinkurl{#1}}}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% ^^A As we are dealing with a class, this has to be done manually
% \def\filedate{2025-03-19}
% \def\fileversion{v0.0.0}
%
% \title{^^A
%   \pkg{xbeamer-overlay} -- Overlays^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail: \email{joseph@texdev.net}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xbeamer-overlay} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*class>
%    \end{macrocode}
%
% Identify the internal prefix.
%    \begin{macrocode}
%<@@=xbeamer>
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage { l3draw }
\RequirePackage { l3opacity }
%    \end{macrocode}
%
% \subsection{Utilities}
%
% \begin{macro}[TF]{\@@_overlay:n}
% \begin{macro}{\@@_overlay_arg:n}
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \@@_overlay:n #1 { T , F , TF }
  {
    \@@_decode_parse:n {#1}
    \bool_if:NTF \l_@@_decode_overlays_bool
      \prg_return_true:
      \prg_return_false:
  }
%    \end{macrocode}
%   A macro processor variant of the check that always results in an |N|-type
%   bool.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_overlay_arg:n #1
  {
    \@@_overlay:nTF {#1}
      { \cs_set:Npn \ProcessedArgument { \c_true_bool } }
      { \cs_set:Npn \ProcessedArgument { \c_false_bool } }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Action commands and environments}
%
% Commands that can be used as actions all have a common form (with one
% exception). The common internal structure is used to enable them to be used
% as actions by looking for the name
% \cs[no-index]{@@_action_\meta{name}_begin:}. There are two forms: opt-in and
% opt-out
%
% \begin{macro}{\@@_action_alert_begin:, \@@_action_alert_end:}
%   Currently a rather simple approach!
%    \begin{macrocode}
\cs_new_protected:Npn \@@_action_alert_begin:
  {
    \group_begin:
      \color_select:n { red }
  }
\cs_new_protected:Npn \@@_action_alert_end:
  { \group_end: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \@@_action_invisible_begin:, \@@_action_invisible_end:,
%     \@@_action_visible_begin:,   \@@_action_visible_end:
%   }
%   Simply hide unconditionally.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_action_invisible_begin:
  {
    \group_begin:
      \opacity_select:n { 0 }
  }
\cs_new_protected:Npn \@@_action_invisible_end:
  { \group_end: }
\cs_new_eq:NN \@@_action_visible_begin: \@@_action_invisible_begin:
\cs_new_eq:NN \@@_action_visible_end: \@@_action_invisible_end:
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_action_only_begin:, \@@_action_only_end:}
%   Here, we simply throw away the content we do not want: this is done by
%   typesetting in a disposable box.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_action_only_begin:
  { \vbox_set:Nw \l_@@_tmp_box }
\cs_new_protected:Npn \@@_action_only_end:
  { \vbox_set_end: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_action_uncover_begin:, \@@_action_uncover_end:}
%   Currently the same as making things invisible, but that will change.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_action_uncover_begin:
  {
    \group_begin:
      \opacity_select:n { 0 }
  }
\cs_new_protected:Npn \@@_action_uncover_end:
  { \group_end: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\only, \invisible, \uncover}
% \begin{environment}{onlyenv, invisibleenv, uncoverenv}
%   Commands and environments where the payload applies when the material is
%   not active on the slide.
%    \begin{macrocode}
\clist_map_inline:nn { only , invisible , uncover }
  {
    \ExpandArgs { cne } \NewDocumentCommand {#1} { D <> { all } +m }
      {
        \exp_not:N \@@_overlay:nTF {##1}
          {##2}
          {
            \exp_not:c { @@_action_ #1 _begin: }
            ##2
            \exp_not:c { @@_action_ #1 _end: }
          }
      }
    \ExpandArgs { nnee } \NewDocumentEnvironment { #1 env }
      { > { \@@_overlay_arg:n } D <> { all } }
      {
        \exp_not:N \bool_if:NF ##1
          { \exp_not:c { @@_action_ #1 _begin: } }
      }
      {
        \exp_not:N \bool_if:NF ##1
          { \exp_not:c { @@_action_ #1 _end: } }
      }
  }
%    \end{macrocode}
% \end{environment}
% \end{macro}
% \begin{macro}{\alert, \visible}
% \begin{environment}{alertenv, visibleenv}
%   And those where the action applies when we are on the slide.
%    \begin{macrocode}
\clist_map_inline:nn { alert , visible }
  {
    \ExpandArgs { cne } \NewDocumentCommand {#1} { D <> { all } +m }
      {
        \exp_not:N \@@_overlay:nTF {##1}
          {
            \exp_not:c { @@_action_ #1 _begin: }
            ##2
            \exp_not:c { @@_action_ #1 _end: }
          }
          {##2}
      }
    \ExpandArgs { nnee } \NewDocumentEnvironment { #1 env }
      { > { \@@_overlay_arg:n } D <> { all } }
      {
        \exp_not:N \bool_if:TF ##1
          { \exp_not:c { @@_action_ #1 _begin: } }
      }
      {
        \exp_not:N \bool_if:TF ##1
          { \exp_not:c { @@_action_ #1 _end: } }
      }
  }
%    \end{macrocode}
% \end{environment}
% \end{macro}
%
% \begin{variable}
%   {
%     \l_@@_saved_overlays_bool ,
%     \l_@@_saved_action_str    ,
%     \l_@@_saved_actions_bool
%   }
%    \begin{macrocode}
\bool_new:N \l_@@_saved_overlays_bool
\str_new:N \l_@@_saved_action_str
\bool_new:N \l_@@_saved_actions_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\action}
% \begin{environment}{actionenv}
%   As we need data on not just overlays but also actions at the end of the
%   environment, this has to be done manually.
%    \begin{macrocode}
\NewDocumentCommand \action { D <> { all } +m }
  {
    \@@_overlay:nTF {#1}
      {
        \bool_if:NTF \l_@@_decode_actions_bool
          {
            \use:c { @@_action_ \l_@@_decode_action_str _begin: }
            #2
            \use:c { @@_action_ \l_@@_decode_action_str _end: }
          }
          {#2}
      }
      {
        \@@_action_uncover_begin:
        #2
        \@@_action_uncover_end:
      }
  }
\NewDocumentEnvironment { actionenv } { D <> { all } }
  {
    \@@_decode_parse:n {#1}
    \bool_set_eq:NN \l_@@_saved_overlays_bool
      \l_@@_decode_overlays_bool
    \str_set_eq:NN \l_@@_saved_action_str
      \l_@@_decode_action_str
    \bool_set_eq:NN \l_@@_saved_actions_bool
      \l_@@_decode_actions_bool
    \bool_if:NTF \l_@@_decode_overlays_bool
      {
        \bool_if:NT \l_@@_decode_actions_bool
          { \use:c { @@_action_ \l_@@_decode_action_str _begin: } }
      }
      { \@@_action_uncover_begin: }
  }
  {
    \bool_if:NTF \l_@@_saved_overlays_bool
      {
        \bool_if:NT \l_@@_saved_actions_bool
          { \use:c { @@_action_ \l_@@_saved_action_str _end: } }
      }
      { \@@_action_uncover_end: }
  }
%    \end{macrocode}
% \end{environment}
% \end{macro}
%
% \subsection{Non-action commands and environments}
%
% This section contains commands and environments that do \emph{not}
% need to be made available as actions.
%
% \begin{macro}{\alt}
%   Simple wrappers around the internal switch.
%    \begin{macrocode}
\NewDocumentCommand \alt { D <> { all } +m +m }
  {
    \@@_overlay:nTF {#1}
      {#2}
      {#3}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\onslide}
% \begin{macro}{\@@_onslide:n}
%   As with \cs{uncover}, we likely need something for spacing in the visible
%   branch.
%    \begin{macrocode}
\NewDocumentCommand \onslide { D <> { all } }
  { \@@_onslide:n {#1} }
\cs_new_protected:Npn \@@_onslide:n #1
  {
    \tl_use:N \g_@@_onslide_tl
    \@@_overlay:nTF {#1}
      { \tl_gclear:N \g_@@_onslide_tl }
      {
        \draw_hidden_begin:
        \tl_gset:Nn \g_@@_onslide_tl { \draw_hidden_end: }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{variable}{\g_@@_onslide_tl}
%    \begin{macrocode}
\tl_new:N \g_@@_onslide_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\temporal}
%   A tricky one: to separate the not-on-current-slide cases, the flag to
%   continue is used.
%    \begin{macrocode}
\NewDocumentCommand \temporal { D <> { all } +m +m +m }
  {
    \@@_overlay:nTF {#1}
      {#3}
      {
        \bool_if:NTF \g_@@_slide_continue_bool
          {#4}
          {#2}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\pause}
%   A thin wrapper.
%    \begin{macrocode}
\NewDocumentCommand \pause { o }
  {
    \IfNoValueTF {#1}
      { \int_gincr:N \g_@@_pauses_int }
      { \int_gset:Nn \g_@@_pauses_int {#1} }
    \exp_args:Ne \@@_onslide:n { \int_use:N \g_@@_pauses_int - }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Adding overlays to existing commands}
%
% \begin{macro}
%  {
%    \textbf ,
%    \textit ,
%    \textmd ,
%    \textnormal ,
%    \textrm ,
%    \textsc ,
%    \textsf ,
%    \textsl ,
%    \texttt ,
%    \textup ,
%    \emph
%  }
% \begin{macro}{\@@_textcmd_eqiv:n}
%   Make the standard text commands overlay-aware. To keep the spacing
%   unchanged when the command is not active, we use the same approach as
%   the kernel does for inserting the right grouping.
%    \begin{macrocode}
\tl_map_inline:nn
  {
    \textbf
    \textit
    \textmd
    \textnormal
    \textrm
    \textsc
    \textsf
    \textsl
    \texttt
    \textup
    \emph
  }
  {
    \ExpandArgs { c } \NewCommandCopy { std \cs_to_str:N #1 } #1
    \ExpandArgs { Nne } \RenewDocumentCommand #1
      { D <> { all } +m }
      {
        \exp_not:N \@@_overlay:nTF {##1}
          { \exp_not:c { std \cs_to_str:N #1 } }
          { \exp_not:N \@@_textcmd_eqiv:n }
            {##2}
      }
  }
\cs_new_protected:Npn \@@_textcmd_eqiv:n #1
  {
    \mode_if_math:TF
      { { \mbox {#1} } }
      {
        \mode_leave_vertical:
        {#1}
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
%</class>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
