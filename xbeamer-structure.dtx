% \iffalse meta-comment
%
% File: xbeamer-structure.dtx Copyright (C) 2024,2025 Joseph Wright
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "xbeamer bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% The released version of this bundle is available from CTAN.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/josephwright/xbeamer
%
% for those people who are interested.
%
% -----------------------------------------------------------------------
%
%<*driver>
\documentclass{l3doc}
% Additional commands needed in this source
\NewDocumentCommand\email{m}{\href{mailto:#1}{\nolinkurl{#1}}}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% ^^A As we are dealing with a class, this has to be done manually
% \def\filedate{2025-03-19}
% \def\fileversion{v0.0.0}
%
% \title{^^A
%   \pkg{xbeamer-structure} -- Structural commands^^A
%   \thanks{This file describes \fileversion,
%     last revised \filedate.}^^A
% }
%
% \author{^^A
%  Joseph Wright^^A
%  \thanks{^^A
%    E-mail: \email{joseph@texdev.net}^^A
%   }^^A
% }
%
% \date{Released \filedate}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{xbeamer-structure} implementation}
%
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*class>
%    \end{macrocode}
%
% Identify the internal prefix.
%    \begin{macrocode}
%<@@=xbeamer>
%    \end{macrocode}
%
% \begin{variable}
%   {
%     \l_@@_section_tl ,
%     \l_@@_subsection_tl ,
%     \l_@@_subsubsection_tl
%   }
%    \begin{macrocode}
\tl_new:N \l_@@_section_tl
\tl_new:N \l_@@_subsection_tl
\tl_new:N \l_@@_subsubsection_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\section, \subsection, \subsubsection}
% \begin{macro}
%   {
%     \insertsection       ,
%     \insertsubsection   ,
%     \insertsubsubsection
%   }
%  The sectioning commands all have essentially the same form: we therefore
%  create using a generator with the necessary conditionals in place. As we
%  do not typeset sections at this stage, the code is quite different from
%  \pkg{article}. This also means that the bookmark links need to point forward
%  to the next slide: if that doesn't appear, the bookmarks will be out.
%    \begin{macrocode}
\clist_map_inline:nn { section , subsection , subsubsection }
  {
    \use:e
      {
        \NewDocumentCommand \exp_not:c { insert #1 } { }
          {
            \exp_not:N \tl_use:N
            \exp_not:c { l_@@_ #1 _tl }
          }
        \NewDocumentCommand \exp_not:c {#1} 
          { D <> { all } s = { short } O {##4} m }
          {
            \tag_tool:n { sec-start = #1 }
            \tl_set:Nn \exp_not:c { l_@@_ #1 _tl } {##4}
            \str_if_eq:nnT {#1} { section }
              { \tl_clear:N \exp_not:N \l_@@_subsection_tl }
            \str_if_eq:nnF {#1} { subsubsection }
              { \tl_clear:N \exp_not:N \l_@@_subsubsection_tl }
            \exp_not:N \bookmark
              [
                dest =
                  \exp_not:n
                    {
                      \int_eval:n { \g_@@_frame_int + 1 }
                      .
                      \int_eval:n { \g_@@_slide_int + 1 }
                    }
              ]
              {##3}
          }
      }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\frametitle}
%   As a interim approach, we hard-code formatting here but do tag.
%    \begin{macrocode}
\NewDocumentCommand \frametitle { D <> { all } O {#3} m }
  {
    \tag_struct_begin:n { tag = frametitle , title = #3 }
    \tag_mc_begin:n { }
    \MakeLinkTarget * { slide . \@@_frame_slide: }
    \bookmark
      [
        dest     = \@currentHref ,
        keeplevel ,
        rellevel = 1
      ]
      {
        #3 ~ 
        ( Slide ~ \@@_frame_slide: )
      }
    \group_begin:
      \tagpdfparaOff
      \normalfont \Large \bfseries
      #3
      \par
      \bigskip
    \group_end:
    \tag_mc_end:
    \tag_struct_end:
  }
%    \end{macrocode}
% \end{macro}
%
% Temporary code needed to allow frame titles to look like normal sections:
% this will all need to go later. In particular, \cls{beamer} does not
% define \cs{thepage} as it does not have pages; the lower-level \cs{c@page}
% is used instead.
%    \begin{macrocode}
\setcounter { secnumdepth } { -1 }
\newcommand \thepage { \csname @arabic\endcsname \c@page }
%    \end{macrocode}
%
% \begin{environment}{description, quote, quotation, verse}
%   Stub logical environments: needed as the tagging setup expects these
%   to exist.
%    \begin{macrocode}
\NewDocumentEnvironment { description } { } { } { }
\NewDocumentEnvironment { quote } { } { } { }
\NewDocumentEnvironment { quotation } { } { } { }
\NewDocumentEnvironment { verse } { } { } { }
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\block}
%    \begin{macrocode}
\NewDocumentEnvironment { block } { D <> { all } }
  {
    \vbox_set:Nw \l_@@_tmp_box
  }
  {
    \vbox_set_end:
    \box_use:N \l_@@_tmp_box
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\blocktitle}
%   As a interim approach, hard code block title formatting: tagging here
%   needs to be woked out.
%    \begin{macrocode}
\NewDocumentCommand \blocktitle { D <> { all } m }
  {
    \group_begin:
      \medskip
      \normalfont \large \bfseries
      #2
      \par
      \medskip
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\alert}
%   We will likely want more flexibility here: for the moment, hard-code
%   something.
%    \begin{macrocode}
\NewDocumentCommand \alert { D <> { all } +m }
  {
    \@@_overlay:nTF {#1}
      { \textcolor { red } }
      { \textcolor { . } }
        {#2}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\item}
% \begin{macro}{\@@_item_parse_spec:n}
%   Again, add the additional argument: here, we have to do a little
%   gymnastics. The test for an overlay has to come after the standard item
%   definition: in a list, items have to \emph{close} the structure before
%   them first, so if we test too early, we'd end up covering then uncovering
%   straight away!
%    \begin{macrocode}
\AddToHook { begindocument / before }
  {
    \NewCommandCopy \stditem \item
    \RenewDocumentCommand \item { d <> = { label } o }
      {
        \IfNoValueTF {#2}
          { \stditem }
          { \stditem [ #2 ] }
        \IfNoValueTF {#1}
          {
            \tl_if_empty:NF \l_@@_block_inner_spec_tl
              {
                \exp_args:NV \@@_item_parse_spec:n
                  \l_@@_block_inner_spec_tl
              }
          }
          { \@@_item_parse_spec:n {#1} }
      }
  }
%    \end{macrocode}
%   Parsing the spec is a separate function here has there are a couple of
%   routes to get here. At present we only have a \texttt{false} branch, but
%   for spacing we likely will need to add something to the \texttt{true}
%   branch too.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_item_parse_spec:n #1
  {
    \@@_overlay:nF {#1}
      {
        \tl_gset:Nn \g_@@_list_end_tl
          {
            \draw_hidden_end:
            \tl_gclear:N \g_@@_list_end_tl
          }
        \draw_hidden_begin:
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{variable}{\tl_new:N \g_@@_list_end_tl}
%    \begin{macrocode}
\tl_new:N \g_@@_list_end_tl
%    \end{macrocode}
% \end{variable}
%  \begin{macro}{\__block_list_item_end:, \__block_list_end:}
%    Currently no hook for this, so we have to do internal patching.
%    \begin{macrocode}
\cs_set:Npe \__block_list_item_end:
  {
    \exp_not:N \g_@@_list_end_tl
    \exp_not:o \__block_list_item_end:
  }
\cs_set:Npe \__block_list_end:
  {
    \exp_not:N \g_@@_list_end_tl
    \exp_not:o \__block_list_end:
  }
%    \end{macrocode}
%  \end{macro}
%
% \begin{variable}{\l_@@_block_inner_spec_tl}
%   Add an overlay key to the \texttt{block} template.  Placed here, it applies
%   \emph{before} the \cs{item} starts, so we do not have to redefine the
%   latter to do actions up-front. This also means it can apply to whatever we
%   want it to within a block.
%    \begin{macrocode}
\keys_define:nn { template / block / display  }
  { overlay-spec .tl_set:N = \l_@@_block_inner_spec_tl }
%    \end{macrocode}
% \end{variable}
%
% Again temporary code: allow us to have some useful result for lists, and in
% particular let them interface with tagging (without this, you cannot load the
% tagging code).
%    \begin{macrocode}
\setlength  \labelsep  { 0.5em }
\newcommand \labelenumi { \theenumi . }
\newcommand \labelenumii { ( \theenumii ) }
\newcommand \labelenumiii { \theenumiii . }
\newcommand \labelenumiv { \theenumiv . }
\newcommand \labelitemi  { \labelitemfont \textbullet }
\newcommand \labelitemii { \labelitemfont \bfseries \textendash }
\newcommand \labelitemiii { \labelitemfont \textasteriskcentered }
\newcommand \labelitemiv  { \labelitemfont \textperiodcentered }
\newcommand \labelitemfont { \normalfont }
%    \end{macrocode}
%
% List design settings: once again temporary and taken from the standard
% classes.
%    \begin{macrocode}
\setlength \leftmargini   { 2em }
\setlength \leftmarginii  { 2em }
\setlength \leftmarginiii { 2em }
\setlength  \labelsep  { 0.5em }
\setlength  \labelwidth { \leftmargini }
\addtolength \labelwidth { -\labelsep }
\def \@listi
  {
    \leftmargin \leftmargini
    \topsep 3pt plus 2pt minus 2.5pt
    \parsep 0pt
    \itemsep3pt plus 2pt minus 3pt
  }
\let \@listI \@listi
\def \@listii
  {
    \leftmargin\leftmarginii
    \topsep    2pt plus 1pt minus 2pt
    \parsep    0pt plus pt
    \itemsep   \parsep
  }
\def \@listiii 
  {
    \leftmargin\leftmarginiii
    \topsep    2pt plus 1pt minus 2pt
    \parsep    0pt plus pt
    \itemsep   \parsep
  }
\setlength \partopsep { 0pt }
%    \end{macrocode}
%
%    \begin{macrocode}
%</class>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
